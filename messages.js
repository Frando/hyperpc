// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

exports.TYPE = {
  "MANIFEST": 1,
  "CALL": 2,
  "RETURN": 3
}

exports.CALL = {
  "API": 1,
  "OBJECT": 2
}

exports.RETURN = {
  "CALLBACK": 1,
  "PROMISE": 2
}

exports.PROMISE = {
  "RESOLVE": 0,
  "REJECT": 1
}

exports.ARGUMENT = {
  "BYTES": 1,
  "JSON": 2,
  "CALLBACK": 3,
  "RPCIFIED": 4,
  "STREAM": 5,
  "ERROR": 6
}

exports.STREAM = {
  "READABLE": 1,
  "WRITEABLE": 2,
  "DUPLEX": 3
}

var Arg = exports.Arg = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Call = exports.Call = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Return = exports.Return = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Manifest = exports.Manifest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Msg = exports.Msg = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineArg()
defineCall()
defineReturn()
defineManifest()
defineMsg()

function defineArg () {
  var Rpcified = Arg.Rpcified = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  var Stream = Arg.Stream = {
    buffer: true,
    encodingLength: null,
    encode: null,
    decode: null
  }

  defineRpcified()
  defineStream()

  function defineRpcified () {
    var enc = [
      encodings.string
    ]

    Rpcified.encodingLength = encodingLength
    Rpcified.encode = encode
    Rpcified.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.manifest)) throw new Error("manifest is required")
      var len = enc[0].encodingLength(obj.manifest)
      length += 1 + len
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.manifest)) throw new Error("manifest is required")
      buf[offset++] = 10
      enc[0].encode(obj.manifest, buf, offset)
      offset += enc[0].encode.bytes
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        manifest: ""
      }
      var found0 = false
      while (true) {
        if (end <= offset) {
          if (!found0) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.manifest = enc[0].decode(buf, offset)
          offset += enc[0].decode.bytes
          found0 = true
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  function defineStream () {
    var enc = [
      encodings.enum,
      encodings.bool
    ]

    Stream.encodingLength = encodingLength
    Stream.encode = encode
    Stream.decode = decode

    function encodingLength (obj) {
      var length = 0
      if (!defined(obj.type)) throw new Error("type is required")
      var len = enc[0].encodingLength(obj.type)
      length += 1 + len
      if (!defined(obj.objectMode)) throw new Error("objectMode is required")
      var len = enc[1].encodingLength(obj.objectMode)
      length += 1 + len
      return length
    }

    function encode (obj, buf, offset) {
      if (!offset) offset = 0
      if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
      var oldOffset = offset
      if (!defined(obj.type)) throw new Error("type is required")
      buf[offset++] = 8
      enc[0].encode(obj.type, buf, offset)
      offset += enc[0].encode.bytes
      if (!defined(obj.objectMode)) throw new Error("objectMode is required")
      buf[offset++] = 16
      enc[1].encode(obj.objectMode, buf, offset)
      offset += enc[1].encode.bytes
      encode.bytes = offset - oldOffset
      return buf
    }

    function decode (buf, offset, end) {
      if (!offset) offset = 0
      if (!end) end = buf.length
      if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
      var oldOffset = offset
      var obj = {
        type: 1,
        objectMode: false
      }
      var found0 = false
      var found1 = false
      while (true) {
        if (end <= offset) {
          if (!found0 || !found1) throw new Error("Decoded message is not valid")
          decode.bytes = offset - oldOffset
          return obj
        }
        var prefix = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tag = prefix >> 3
        switch (tag) {
          case 1:
          obj.type = enc[0].decode(buf, offset)
          offset += enc[0].decode.bytes
          found0 = true
          break
          case 2:
          obj.objectMode = enc[1].decode(buf, offset)
          offset += enc[1].decode.bytes
          found1 = true
          break
          default:
          offset = skip(prefix & 7, buf, offset)
        }
      }
    }
  }

  var enc = [
    encodings.enum,
    encodings.bytes,
    encodings.string,
    Rpcified,
    Stream
  ]

  Arg.encodingLength = encodingLength
  Arg.encode = encode
  Arg.decode = decode

  function encodingLength (obj) {
    var length = 0
    if ((+defined(obj.bytes) + +defined(obj.json) + +defined(obj.callback) + +defined(obj.rpcified) + +defined(obj.stream) + +defined(obj.error)) > 1) throw new Error("only one of the properties defined in oneof payload can be set")
    if (!defined(obj.type)) throw new Error("type is required")
    var len = enc[0].encodingLength(obj.type)
    length += 1 + len
    if (defined(obj.bytes)) {
      var len = enc[1].encodingLength(obj.bytes)
      length += 1 + len
    }
    if (defined(obj.json)) {
      var len = enc[2].encodingLength(obj.json)
      length += 1 + len
    }
    if (defined(obj.callback)) {
      var len = enc[2].encodingLength(obj.callback)
      length += 1 + len
    }
    if (defined(obj.rpcified)) {
      var len = enc[3].encodingLength(obj.rpcified)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.stream)) {
      var len = enc[4].encodingLength(obj.stream)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.error)) {
      var len = enc[2].encodingLength(obj.error)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if ((+defined(obj.bytes) + +defined(obj.json) + +defined(obj.callback) + +defined(obj.rpcified) + +defined(obj.stream) + +defined(obj.error)) > 1) throw new Error("only one of the properties defined in oneof payload can be set")
    if (!defined(obj.type)) throw new Error("type is required")
    buf[offset++] = 8
    enc[0].encode(obj.type, buf, offset)
    offset += enc[0].encode.bytes
    if (defined(obj.bytes)) {
      buf[offset++] = 18
      enc[1].encode(obj.bytes, buf, offset)
      offset += enc[1].encode.bytes
    }
    if (defined(obj.json)) {
      buf[offset++] = 26
      enc[2].encode(obj.json, buf, offset)
      offset += enc[2].encode.bytes
    }
    if (defined(obj.callback)) {
      buf[offset++] = 34
      enc[2].encode(obj.callback, buf, offset)
      offset += enc[2].encode.bytes
    }
    if (defined(obj.rpcified)) {
      buf[offset++] = 42
      varint.encode(enc[3].encodingLength(obj.rpcified), buf, offset)
      offset += varint.encode.bytes
      enc[3].encode(obj.rpcified, buf, offset)
      offset += enc[3].encode.bytes
    }
    if (defined(obj.stream)) {
      buf[offset++] = 50
      varint.encode(enc[4].encodingLength(obj.stream), buf, offset)
      offset += varint.encode.bytes
      enc[4].encode(obj.stream, buf, offset)
      offset += enc[4].encode.bytes
    }
    if (defined(obj.error)) {
      buf[offset++] = 58
      enc[2].encode(obj.error, buf, offset)
      offset += enc[2].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      type: 1,
      bytes: null,
      json: "",
      callback: "",
      rpcified: null,
      stream: null,
      error: ""
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.type = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 2:
        delete obj.json
        delete obj.callback
        delete obj.rpcified
        delete obj.stream
        delete obj.error
        obj.bytes = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        case 3:
        delete obj.bytes
        delete obj.callback
        delete obj.rpcified
        delete obj.stream
        delete obj.error
        obj.json = enc[2].decode(buf, offset)
        offset += enc[2].decode.bytes
        break
        case 4:
        delete obj.bytes
        delete obj.json
        delete obj.rpcified
        delete obj.stream
        delete obj.error
        obj.callback = enc[2].decode(buf, offset)
        offset += enc[2].decode.bytes
        break
        case 5:
        delete obj.bytes
        delete obj.json
        delete obj.callback
        delete obj.stream
        delete obj.error
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.rpcified = enc[3].decode(buf, offset, offset + len)
        offset += enc[3].decode.bytes
        break
        case 6:
        delete obj.bytes
        delete obj.json
        delete obj.callback
        delete obj.rpcified
        delete obj.error
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.stream = enc[4].decode(buf, offset, offset + len)
        offset += enc[4].decode.bytes
        break
        case 7:
        delete obj.bytes
        delete obj.json
        delete obj.callback
        delete obj.rpcified
        delete obj.stream
        obj.error = enc[2].decode(buf, offset)
        offset += enc[2].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineCall () {
  var enc = [
    encodings.enum,
    encodings.string,
    Arg
  ]

  Call.encodingLength = encodingLength
  Call.encode = encode
  Call.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.type)) throw new Error("type is required")
    var len = enc[0].encodingLength(obj.type)
    length += 1 + len
    if (!defined(obj.id)) throw new Error("id is required")
    var len = enc[1].encodingLength(obj.id)
    length += 1 + len
    if (defined(obj.name)) {
      var len = enc[1].encodingLength(obj.name)
      length += 1 + len
    }
    if (defined(obj.objectid)) {
      var len = enc[1].encodingLength(obj.objectid)
      length += 1 + len
    }
    if (defined(obj.method)) {
      var len = enc[1].encodingLength(obj.method)
      length += 1 + len
    }
    if (defined(obj.args)) {
      for (var i = 0; i < obj.args.length; i++) {
        if (!defined(obj.args[i])) continue
        var len = enc[2].encodingLength(obj.args[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.type)) throw new Error("type is required")
    buf[offset++] = 8
    enc[0].encode(obj.type, buf, offset)
    offset += enc[0].encode.bytes
    if (!defined(obj.id)) throw new Error("id is required")
    buf[offset++] = 18
    enc[1].encode(obj.id, buf, offset)
    offset += enc[1].encode.bytes
    if (defined(obj.name)) {
      buf[offset++] = 26
      enc[1].encode(obj.name, buf, offset)
      offset += enc[1].encode.bytes
    }
    if (defined(obj.objectid)) {
      buf[offset++] = 34
      enc[1].encode(obj.objectid, buf, offset)
      offset += enc[1].encode.bytes
    }
    if (defined(obj.method)) {
      buf[offset++] = 42
      enc[1].encode(obj.method, buf, offset)
      offset += enc[1].encode.bytes
    }
    if (defined(obj.args)) {
      for (var i = 0; i < obj.args.length; i++) {
        if (!defined(obj.args[i])) continue
        buf[offset++] = 50
        varint.encode(enc[2].encodingLength(obj.args[i]), buf, offset)
        offset += varint.encode.bytes
        enc[2].encode(obj.args[i], buf, offset)
        offset += enc[2].encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      type: 1,
      id: "",
      name: "",
      objectid: "",
      method: "",
      args: []
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.type = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 2:
        obj.id = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        found1 = true
        break
        case 3:
        obj.name = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        case 4:
        obj.objectid = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        case 5:
        obj.method = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        case 6:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.args.push(enc[2].decode(buf, offset, offset + len))
        offset += enc[2].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineReturn () {
  var enc = [
    encodings.enum,
    encodings.string,
    encodings.enum,
    Arg
  ]

  Return.encodingLength = encodingLength
  Return.encode = encode
  Return.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.type)) throw new Error("type is required")
    var len = enc[0].encodingLength(obj.type)
    length += 1 + len
    if (!defined(obj.id)) throw new Error("id is required")
    var len = enc[1].encodingLength(obj.id)
    length += 1 + len
    if (defined(obj.promise)) {
      var len = enc[2].encodingLength(obj.promise)
      length += 1 + len
    }
    if (defined(obj.args)) {
      for (var i = 0; i < obj.args.length; i++) {
        if (!defined(obj.args[i])) continue
        var len = enc[3].encodingLength(obj.args[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.type)) throw new Error("type is required")
    buf[offset++] = 8
    enc[0].encode(obj.type, buf, offset)
    offset += enc[0].encode.bytes
    if (!defined(obj.id)) throw new Error("id is required")
    buf[offset++] = 18
    enc[1].encode(obj.id, buf, offset)
    offset += enc[1].encode.bytes
    if (defined(obj.promise)) {
      buf[offset++] = 24
      enc[2].encode(obj.promise, buf, offset)
      offset += enc[2].encode.bytes
    }
    if (defined(obj.args)) {
      for (var i = 0; i < obj.args.length; i++) {
        if (!defined(obj.args[i])) continue
        buf[offset++] = 34
        varint.encode(enc[3].encodingLength(obj.args[i]), buf, offset)
        offset += varint.encode.bytes
        enc[3].encode(obj.args[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      type: 1,
      id: "",
      promise: 0,
      args: []
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.type = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 2:
        obj.id = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        found1 = true
        break
        case 3:
        obj.promise = enc[2].decode(buf, offset)
        offset += enc[2].decode.bytes
        break
        case 4:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.args.push(enc[3].decode(buf, offset, offset + len))
        offset += enc[3].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineManifest () {
  var enc = [
    encodings.string,
    encodings.varint
  ]

  Manifest.encodingLength = encodingLength
  Manifest.encode = encode
  Manifest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.manifest)) throw new Error("manifest is required")
    var len = enc[0].encodingLength(obj.manifest)
    length += 1 + len
    if (!defined(obj.nonce)) throw new Error("nonce is required")
    var len = enc[1].encodingLength(obj.nonce)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.manifest)) throw new Error("manifest is required")
    buf[offset++] = 10
    enc[0].encode(obj.manifest, buf, offset)
    offset += enc[0].encode.bytes
    if (!defined(obj.nonce)) throw new Error("nonce is required")
    buf[offset++] = 16
    enc[1].encode(obj.nonce, buf, offset)
    offset += enc[1].encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      manifest: "",
      nonce: 0
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.manifest = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 2:
        obj.nonce = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        found1 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineMsg () {
  var enc = [
    encodings.enum,
    Manifest,
    Call,
    Return
  ]

  Msg.encodingLength = encodingLength
  Msg.encode = encode
  Msg.decode = decode

  function encodingLength (obj) {
    var length = 0
    if ((+defined(obj.manifest) + +defined(obj.call) + +defined(obj.return)) > 1) throw new Error("only one of the properties defined in oneof msg can be set")
    if (!defined(obj.type)) throw new Error("type is required")
    var len = enc[0].encodingLength(obj.type)
    length += 1 + len
    if (defined(obj.manifest)) {
      var len = enc[1].encodingLength(obj.manifest)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.call)) {
      var len = enc[2].encodingLength(obj.call)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    if (defined(obj.return)) {
      var len = enc[3].encodingLength(obj.return)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if ((+defined(obj.manifest) + +defined(obj.call) + +defined(obj.return)) > 1) throw new Error("only one of the properties defined in oneof msg can be set")
    if (!defined(obj.type)) throw new Error("type is required")
    buf[offset++] = 8
    enc[0].encode(obj.type, buf, offset)
    offset += enc[0].encode.bytes
    if (defined(obj.manifest)) {
      buf[offset++] = 18
      varint.encode(enc[1].encodingLength(obj.manifest), buf, offset)
      offset += varint.encode.bytes
      enc[1].encode(obj.manifest, buf, offset)
      offset += enc[1].encode.bytes
    }
    if (defined(obj.call)) {
      buf[offset++] = 26
      varint.encode(enc[2].encodingLength(obj.call), buf, offset)
      offset += varint.encode.bytes
      enc[2].encode(obj.call, buf, offset)
      offset += enc[2].encode.bytes
    }
    if (defined(obj.return)) {
      buf[offset++] = 34
      varint.encode(enc[3].encodingLength(obj.return), buf, offset)
      offset += varint.encode.bytes
      enc[3].encode(obj.return, buf, offset)
      offset += enc[3].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      type: 1,
      manifest: null,
      call: null,
      return: null
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.type = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 2:
        delete obj.call
        delete obj.return
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.manifest = enc[1].decode(buf, offset, offset + len)
        offset += enc[1].decode.bytes
        break
        case 3:
        delete obj.manifest
        delete obj.return
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.call = enc[2].decode(buf, offset, offset + len)
        offset += enc[2].decode.bytes
        break
        case 4:
        delete obj.manifest
        delete obj.call
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.return = enc[3].decode(buf, offset, offset + len)
        offset += enc[3].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
